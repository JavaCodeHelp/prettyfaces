<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="components">
	<title>* Rendering HTML links and URLs</title>

	<para>
		PrettyFaces provides several methods of generating HTML links via a set of components, and
		when operating in a JSF 2.0 environment, standard JSF 'h:link' components may be used instead.
		If the provided mappingId requires any url-pattern-parameters or managed-query-parameters, they 
		can be  passed in via the &lt;f:param&gt; tag.
	</para>
	<para>
		URL pattern parameters can be passed individually, as a <code>java.util.List</code>, or as an 
		Array. In the  latter two cases, toString() will be called on each of the objects in the 
		list/array. If an empty or null list/array is passed, it will be ignored.
	</para>
	<para>
		URL path-parameters do NOT have a name attribute, and are parsed in the order they are passed 
		into the tag. Managed query-parameters DO have a name attribute, and order is irrelevant.
	</para>

	<section id="components.prettylink">
		<title>The &lt;pretty:link&gt; component</title>
		<para>
			PrettyFaces provides a JSF component to output an HTML link to the page. The link tag 
			requires a mapping-id (specified in the pretty-config.xml,) identifying which link to 
			render.
		</para>
		<example>
			<title>Using the link component</title>
			<programlisting><![CDATA[<url-mapping id="viewItem">
	<pattern value="/store/#{ cat : bean.category }/#{ iid : bean.itemId }/" />
	<view-id value="/faces/shop/item.jsf"/> 
	<action>#{bean.loadItem}</action>
</url-mapping>]]></programlisting>
			<programlisting><![CDATA[<%@ taglib prefix="pretty" uri="http://ocpsoft.com/prettyfaces" %>
 
<pretty:link mappingId="viewItem">
	<f:param value="#{item.category}" />
	<f:param value="#{item.id}" />
	View Item. (This is Link Text)
</pretty:link>]]></programlisting>
			<para>
				Output, assuming that <code>#{item.category} == shoes</code>, and <code>#{item.id} == 24</code>
			</para>
			<programlisting> /store/shoes/24</programlisting>
		</example>
	</section>

	<section id="components.urlbuffer">
		<title>The &lt;pretty:urlbuffer&gt; component</title>
		<para>
			PrettyFaces provides a JSF component to generate a URL for use as a page scoped variable 
			through El. This tag requires a mapping-id (specified in the pretty-config.xml)
		</para>
		<example>
			<title>Using the URL buffer component</title>
			<programlisting><![CDATA[<url-mapping id="viewItem">
	<pattern value="/store/#{ cat : bean.category }/#{ iid : bean.itemId }/" />
	<query-param name="language"> #{ bean.language } </query-param>
	<view-id value="/faces/shop/item.jsf"/> 
	<action>#{bean.loadItem}</action>
</url-mapping>]]></programlisting>
			<programlisting><![CDATA[<%@ taglib prefix="pretty" uri="http://ocpsoft.com/prettyfaces" %>
 
<pretty:urlbuffer var="itemListURL" mappingId="viewItem">
	<f:param value="shoes" />
	<f:param value="24" />
	<f:param name="language" value="en_US" />
</pretty:urlbuffer>
<h:outputText value="Generated URL Is: #{requestScope.itemListURL}" />
]]></programlisting>
			<para>Output:</para>
			<programlisting> /store/shoes/24?language=en_US</programlisting>
		</example>
	</section>
	
	<section id="components.jsf">
		<title>Using JSF standard components</title>
		<caution>
			<para>
 				Mappings using <link linkend="config.dynaview">DynaView</link> functionality will not 
 				function with JSF link components.
			</para>
		</caution>
		<para>
			Because PrettyFaces provides <link linkend="outbound_rewriting">out-bound URL-rewriting</link>,
			one can actually use standard JSF components such as <code><![CDATA[<h:outputLink>]]></code>
			in JSF 1.x, or <code><![CDATA[<h:link>]]></code> in JSF 2.x.
		</para>
		<example>
			<title>Using the <code><![CDATA[<h:outputLink>]]></code> in JSF 1.x</title>
			<programlisting><![CDATA[<url-mapping id="viewItem">
	<pattern value="/store/#{ cat : bean.category }/#{ iid : bean.itemId }/" />
	<query-param name="language"> #{ bean.language } </query-param>
	<view-id value="/faces/shop/item.jsf"/> 
	<action>#{bean.loadItem}</action>
</url-mapping>]]></programlisting>
			<programlisting><![CDATA[<%@ taglib prefix="h" uri="http://java.sun.com/jsf/html" %>
 
<h:outputLink value="/faces/shop/item.jsf">
	<f:param name="cat" value="shoes" />
	<f:param name="iid" value="24" />
	<f:param name="language" value="en_US" />
</h:outputLink>
]]></programlisting>
			<para>Output:</para>
			<programlisting> /store/shoes/24?language=en_US</programlisting>
		</example>
		
		<para>
			In JSF 2.x, you can achieve an even greater level of abstraction by using the mapping-ID
			in combination with <code><![CDATA[<h:link>]]></code>
		</para>
		<example>
			<title>Using the <code><![CDATA[<h:link>]]></code> in JSF 2.x</title>
			<programlisting><![CDATA[<url-mapping id="viewItem">
	<pattern value="/store/#{ cat : bean.category }/#{ iid : bean.itemId }/" />
	<query-param name="language"> #{ bean.language } </query-param>
	<view-id value="/faces/shop/item.jsf"/> 
	<action>#{bean.loadItem}</action>
</url-mapping>]]></programlisting>
			<para>
				Both of the following components will generate the same output:
			</para>
			<programlisting><![CDATA[<h:link outcome="/faces/shop/item.jsf">
	<f:param name="cat" value="shoes" />
	<f:param name="iid" value="24" />
	<f:param name="language" value="en_US" />
</h:link>

<h:link outcome="pretty:viewItem">
	<f:param name="cat" value="shoes" />
	<f:param name="iid" value="24" />
	<f:param name="language" value="en_US" />
</h:link>
]]></programlisting>
			<para>Output:</para>
			<programlisting> /store/shoes/24?language=en_US</programlisting>
		</example>
	</section>

</chapter>
