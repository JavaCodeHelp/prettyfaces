<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="outbound_rewriting">
	<title>Outbound URL-rewriting</title>

	<para>
		Outbound URL-rewriting in provides natural integration with most existing URL 
		components (including all of those from the JavaServer Faces framework.) When PrettyFaces is
		installed, any URL passed into <code>HttpServletRequest.encodeRedirectURL(String url)</code> will
		be processed by PrettyFaces outbound URL-rewriting.
	</para>
	
	<section id="java">
		<title>Rewriting URLs in Java</title>
		<para>
			Given the following URL-mapping, we can render a pretty URL simply by invoking
			<code>HttpServletResponse.encodeRedirectURL(String url)</code>:
			
			<programlisting><![CDATA[<url-mapping id="viewCategory">
	<pattern value="/store/#{ cat : bean.category }/" />
	<view-id>/faces/shop/store.jsf</view-id>
</url-mapping>]]></programlisting>
		
			For example:
		
			<programlisting>HttpServletResponse response = getHttpServletResponse();
String rewrittenURL = response.encodeRedirectURL("/faces/shop/store.jsf?cat=shoes&amp;lang=en_US")';</programlisting>
			
			Or if using JSF:
			
			<programlisting>String rewrittenURL = FacesContext.getCurrentInstance().getExternalContext()
			.encodeResourceURL("/faces/shop/store.jsf?cat=shoes&amp;lang=en_US");</programlisting>
			
			Will produce the following output URL:
			
			<programlisting>/store/shoes/?lang=en_US</programlisting>
		
			Notice that even though we did not define a <link linkend="config.queryparams">managed 
			query-parameter</link>, the resulting URL still contains the 'lang' parameter. This is 
			because PrettyFaces only rewrites the <link linkend="config.pathparams.named">named 
			path-parameters</link> defined in the URL-pattern; all other query-parameters are simply
            left unchanged.
		</para>
	</section>
	
	
	
	<section id="jsf">
		<title>* Rewriting URLs in JSF views</title>
		<para>
			Given the following URL-mapping, some of our JSF URLs will automatically be rewritten:
			
			<programlisting><![CDATA[<url-mapping id="viewCategory">
	<pattern value="/store/#{ cat : bean.category }/" />
	<view-id>/faces/shop/store.jsf</view-id>
</url-mapping>]]></programlisting>
		
			For example:
		
			<programlisting><![CDATA[<h:link outcome="/faces/shop/store.jsf" value="View category: Shoes>
	<f:param name="cat" value="shoes" />
	<f:param name="lang" value="en_US" />
</h:link>]]></programlisting>
			
			And:
			
			<programlisting><![CDATA[<h:link outcome="pretty:viewCategory" value="View category: Shoes>
	<f:param name="cat" value="shoes" />
	<f:param name="lang" value="en_US" />
</h:link>]]></programlisting>
			
			Will both produce the same output URL:
			
			<programlisting>/store/shoes/?lang=en_US</programlisting>
		
			Notice that even though we did not define a <link linkend="config.queryparams">managed 
			query-parameter</link>, the resulting URL still contains the 'lang' parameter. This is 
			because PrettyFaces only rewrites the <link linkend="config.pathparams.named">named 
			path-parameters</link> defined in the URL-pattern; all other query-parameters are simply
            left unchanged.
		</para>
      
      <tip>
         <para>
            Notice that all <code>&lt;f:param name="" value=""&gt;</code> elements contain
            both a name and a value attribute. These are required, since (unlike the <code>
            &lt;pretty:link&gt;</code> component,) <code>&lt;h:link&gt;</code> does not
            accept un-named parameters, even when passing a <code>"pretty:mappingId"</code> 
            as the outcome.
         </para>
         <para>
            This is due to the fact that PrettyFaces integration occurs **after** the
            original URL has already been rendered by the <code>&lt;h:link&gt;</code>
            component, intercepting the URL at the <link linkend="java">externalContext.encodeRedirectURL</link>
            step, explained above (in the section "<link linkend="java">Rewriting URLs in Java</link>".)
         </para>
      </tip>
	</section>
	
	<section id="disabling">
		<title>Disabling outbound-rewriting for a URL-mapping</title>
		<para>
			Outbound URL-rewriting may be disabled on an individual mapping basis, by using the attribute
			<code>outbound="false"</code>.
			
			<programlisting><![CDATA[<url-mapping id="viewCategory" outbound="false">
	...
</url-mapping>]]></programlisting>
		</para>
	</section>
</chapter>
