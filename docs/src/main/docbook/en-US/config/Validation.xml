<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<section id="config.validation">

	<title>* Parameter validation</title>

	<para>
	  The validation of path and query parameters is very important as they
	  are directly modifiable by the user. Therefore PrettyFaces offers the
	  possibility to attach validation code to each of your parameters.
	</para>
	
	<section id="config.validation.queryparam">
	
	  <title>Query parameters</title>
	
	  <para>
	    Validation of query parameters can be achieved by attaching standard JSF
	    validators to the parameter.
	  </para> 
	
    <programlisting><![CDATA[<query-param name="language" validatorIds="languageValidator"> #{bean.language} </query-param>]]></programlisting>
	
    <para>
      This example shows how to attach the JSF validator with the ID <code>languageValidator</code>
      to the query parameter. This validator will be executed directly after the URL has been parsed. 
      If the validation fails, PrettyFaces will send a 404 HTTP response. You can change this behavior
      by using the <code>onError</code> attribute and specifying an alternative view to show if validation fails.  
    </para>
    
    <programlisting><![CDATA[<query-param name="language" validatorIds="languageValidator" onError="pretty:error"> #{bean.language} </query-param>]]></programlisting>

    <tip>
      You can attach multiple validators to the same query parameter by using a
      space-separated list of validator IDs.
    </tip>

    <para>
      If you don't want to write a custom JSF validator, you can also reference a managed
      bean method performing the validation. This method must have the exact same
      signature as the <code>validate</code> method of the <code>Validator</code> interface 
    </para>
    
    <programlisting><![CDATA[<query-param name="language" validator="#{languageBean.validateLanguage}"> #{bean.language} </query-param>]]></programlisting>
    
    <programlisting><![CDATA[@Named("languageBean")
@RequestScoped
public class LanguageBean {

  public void validateLanguage(FacesContext context, UIComponent component, Object value) {

    for( String lang : Locale.getISOLanguages() ) {
      if( lang.equals( value.toString() ) ) {
        return;
      }
    }
    throw new ValidatorException( new FacesMessage("invalid.language") )

  }
  
}]]></programlisting>
    
  </section>

    
  <!-- ========================================================== -->
  <!--                    Path Parameters                         -->
  <!-- ========================================================== -->
  
  <section id="config.validation.pathparam">
  
    <title>Path parameters</title>
    
    <para>
      Validation of path parameters is very similar to the validation of query parameters.
      You just have to add a <code>validate</code> element to the <code>pattern</code> element
      of your mapping. It accepts the same validation attributes as the
      <code>query-param</code> element.
    </para>
    
    <para>
      The only important difference to the declaration of query parameter validation 
      is that you have to specify the <code>index</code> of the path parameter you want
      to validate. The <code>index</code> is the absolute position of the path parameter 
      in the pattern. The first parameter is addressed with <code>0</code>.
    </para>

    <programlisting><![CDATA[<url-mapping id="viewCategory">
  <pattern value="/store/#{ cat }/">
    <validate index="0" validatorIds="categoryValidator" onError="pretty:error" />
  </pattern>
  <view-id value="/faces/shop/store.jsf" /> 
</url-mapping>]]></programlisting>

  </section>
    
</section>
