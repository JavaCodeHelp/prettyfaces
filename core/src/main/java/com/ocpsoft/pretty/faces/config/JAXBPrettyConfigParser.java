package com.ocpsoft.pretty.faces.config;

import java.io.IOException;
import java.io.InputStream;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.transform.sax.SAXSource;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLFilterImpl;

import com.ocpsoft.pretty.faces.config.types.PrettyConfigElement;

/**
 * Implementation of {@link PrettyConfigParser} that uses the JAXB API to parse
 * the PrettyFaces configuration.
 * 
 * @author Christian Kaltepoth <christian@kaltepoth.de>
 */
public class JAXBPrettyConfigParser implements PrettyConfigParser
{

   private JAXBContext jaxbContext;

   private SAXParserFactory saxParserFactory;

   /**
    * Constructor
    */
   public JAXBPrettyConfigParser()
   {
      try
      {
         // build JAXBContext using the package we generate the classes to
         jaxbContext = JAXBContext.newInstance("com.ocpsoft.pretty.faces.config.types");

         // create a namespace aware SAXParserFactory
         saxParserFactory = SAXParserFactory.newInstance();
         saxParserFactory.setNamespaceAware(true);

      }
      catch (JAXBException e)
      {
         throw new IllegalStateException(e);
      }
   }

   /*
    * @see com.ocpsoft.pretty.faces.config.PrettyConfigParser#parse(com.ocpsoft.pretty.faces.config.PrettyConfigBuilder, java.io.InputStream)
    */
   public void parse(PrettyConfigBuilder builder, InputStream resource) throws IOException, SAXException
   {

      try
      {

         // create the JAXB unmarshaller
         Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();

         // use a special XMLFilter to do the namespace replacement
         XMLReader xmlReader = saxParserFactory.newSAXParser().getXMLReader();
         XMLFilter namespaceFilter = new NamespaceFilter(xmlReader);
         xmlReader.setContentHandler(unmarshaller.getUnmarshallerHandler());
         SAXSource source = new SAXSource(namespaceFilter, new InputSource(resource));

         // parse the document and get the PrettyConfigElement
         JAXBElement<?> e = (JAXBElement<?>) unmarshaller.unmarshal(source);
         PrettyConfigElement prettyConfigElement = (PrettyConfigElement) e.getValue();

         // build the PrettyConfig and append it to the builder
         PrettyConfig config = new PrettyConfig(prettyConfigElement);
         builder.addFromConfig(config);

      }
      catch (JAXBException e)
      {
         throw new IOException(e);
      }
      catch (ParserConfigurationException e)
      {
         throw new IOException(e);
      }
   }

   /**
    * This class is used to replace older PrettyFaces namespace URIs with the
    * most current one. This is required so that the JAXB classes generated by
    * the most current schema work correctly.
    * 
    * @author Christian Kaltepoth <christian@kaltepoth.de>
    */
   private class NamespaceFilter extends XMLFilterImpl
   {

      /**
       * The prefix of namespaces that have to be replaced
       */
      private final static String EXPECTED_URI_PREFIX = "http://ocpsoft.com/prettyfaces/";

      /**
       * The most current namespace
       */
      private final static String CURRENT_NAMESPACE_URI = "http://ocpsoft.com/prettyfaces/3.2.1";

      public NamespaceFilter(XMLReader reader)
      {
         super(reader);
      }

      public void startPrefixMapping(String prefix, String uri) throws SAXException
      {
         super.startPrefixMapping(prefix, replaceNamespace(uri));
      }

      public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException
      {

         super.startElement(replaceNamespace(uri), localName, qName, attributes);
      }

      public void endElement(String uri, String localName, String qName) throws SAXException
      {
         super.endElement(replaceNamespace(uri), localName, qName);
      }

      private String replaceNamespace(String uri)
      {
         if (uri != null)
         {
            return uri.startsWith(EXPECTED_URI_PREFIX) ? CURRENT_NAMESPACE_URI : uri;
         }
         return null;
      }

   }

}
